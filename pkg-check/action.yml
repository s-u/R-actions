name: 'R package check'
description: 'Performs R CMD check for R package repositories'
inputs:
  pkg-path:
    description: 'path containing the DESCRIPTION file'
    required: false
    default: '.'
  debian-deps:
    description: 'list of system-level Debian/Ubuntu dependencies'
    required: false
    default: ''
  macos-deps:
    description: 'list of system-level macOS dependencies'
    required: false
    default: ''
  windows-deps:
    description: 'list of system-level Windows dependencies'
    required: false
    default: ''
  check-flags:
    description: 'additional flags to use in R CMD check'
    required: false
    default: ''
  build-script:
    description: 'build script to run in the repository instead of R CMD build. It must create the package tar ball one level up.'
    required: false
    default: ''
  dep-type:
    description: 'installation type for package dependecies, use "source" to force re-building of dependencies or "both" (default) to re-use CRAN binaries if present and re-build otherwise'
    required: false
    default: 'both'
outputs:
  pkg-name:
    description: 'Package name'
    value: ${{ env.PACKAGE }} 
runs:
  using: 'composite'
  steps:
   - name: Setup
     run: |
       SRCDIR="$(cd ${{ inputs.pkg-path }} && pwd)"     
       PACKAGE=$(sed -n 's/^Package: *//p' $SRCDIR/DESCRIPTION)
       BLCMD="${{ inputs.build-script }}"
       echo " === Package $PACKAGE ==="
       echo "PACKAGE=$PACKAGE" >> $GITHUB_ENV
       echo "SRCDIR=$SRCDIR" >> $GITHUB_ENV
       echo "BLCMD=$BLCMD" >> $GITHUB_ENV
       if [ -z "$PACKAGE" ]; then echo "::error ::ERROR: invalid package, Package: entry not found"; exit 1; fi
     shell: bash

   - name: Build package tar ball
     shell: bash
     run: bash ${{ github.action_path }}/build.sh

   - name: Install Linux dependencies
     if: ${{ runner.os == 'Linux' && inputs.debian-deps != '' }}
     run: |
         echo "::group::Install Linux system dependencies"
         sudo apt-get install -y ${{ inputs.debian-deps }}
         echo '::endgroup::'
     shell: bash

   - name: Install macOS dependencies
     if: ${{ runner.os == 'macOS' && inputs.macos-deps != '' }}
     run: |
         echo "::group::Install macOS system dependencies"
         Rscript -e 'pkgs=unlist(strsplit("${{ inputs.macos-deps }}", ", *")); source("https://mac.R-project.org/bin/install.R"); install.libs(pkgs)'
         echo ''
         echo '::endgroup::'
     shell: bash

   - name: Install Windows dependencies
     if: ${{ runner.os == 'Windows' && inputs.windows-deps != '' }}
     run: |
       echo "::group::Install Windows system dependencies"
       if which pacman 2>/dev/null; then
         pacman -Sy
         for i in ${{ inputs.windows-deps }}; do
           pacman --sync --noconfirm mingw-w64-i686-$i mingw-w64-x86_64-$i
         done
       else
         echo "NOTE: pacman not found, assuming UCRT toolchain which already contains dependencies"
         echo "      see https://github.com/kalibera/ucrt3 for corresponding action"
       fi
       echo ''
       echo '::endgroup::'
     shell: bash

   - name: Install package and dependencies
     run: bash ${{ github.action_path }}/install.sh "${{ runner.os }}" "${{ inputs.dep-type }}" "${{ inputs.cran }}"
     shell: bash

   - name: R CMD check
     run: |
       echo "::group::R CMD check"
       if ! pdflatex --version | head -n1; then echo "::warning ::pdflatex not found, using --no-manual"; XTRA=--no-manual; fi
       echo ''
       echo R_LIBS=$BLDIR/Rlib R CMD check ${{ inputs.check-flags }} $XTRA $SRCTAR
       cd $BLDIR
       R_LIBS=$BLDIR/Rlib R CMD check ${{ inputs.check-flags }} $XTRA $SRCTAR
       cp -r $BLDIR/*.Rcheck $SRCDIR/
       echo '::endgroup::'
     shell: bash
