name: 'R package check'
description: 'Performs R CMD check for R package repositories'
inputs:
  pkg-path:
    description: 'path containing the DESCRIPTION file'
    required: false
    default: '.'
  debian-deps:
    description: 'list of system-level Debian/Ubuntu dependencies'
    required: false
    default: ''
  macos-deps:
    description: 'list of system-level macOS dependencies'
    required: false
    default: ''
  windows-deps:
    description: 'list of system-level Windows dependencies'
    required: false
    default: ''
  check-flags:
    description: 'additional flags to use in R CMD check'
    required: false
    default: ''
  build-script:
    description: 'build script to run in the repository instead of R CMD build. It must create the package tar ball one level up.'
    required: false
    default: ''
  dep-type:
    description: 'installation type for package dependecies, use "source" to force re-building of dependencies or "both" (default) to re-use CRAN binaries if present and re-build otherwise'
    required: false
    default: 'both'
outputs:
  pkg-name:
    description: 'Package name'
    value: ${{ env.PACKAGE }} 
runs:
  using: 'composite'
  steps:
   - name: Identify package
     run: |
       # Verifying package structure
       PACKAGE=$(sed -n 's/^Package: *//p' ${{ inputs.pkg-path }}/DESCRIPTION)
       echo " === Package $PACKAGE ==="
       echo "PACKAGE=$PACKAGE" >> $GITHUB_ENV
       if [ -z "$PACKAGE" ]; then echo "::error ::ERROR: invalid package, Package: entry not found"; exit 1; fi
     shell: bash

   - name: Build
     run: |
       # Build ${{ env.PACKAGE }}
       echo "::group::Building $PACKAGE tar ball"
       R --version | head -n4
       rm -f toolchain.tar.zst ## fix for UCRT, just in case it's left over...
       SRCDIR="$(cd ${{ inputs.pkg-path }} && pwd)"
       BLDIR="$(cd $SRCDIR/.. && pwd)"
       BLCMD="${{ inputs.build-script }}"
       if [ -z "$BLCMD" ]; then 
         BLCMD="cd $BLDIR && R CMD build $SRCDIR"
       fi
       bash -c "$BLCMD"
       SRCTAR=`ls -d $BLDIR/${PACKAGE}_*tar.gz`
       if [ -z "$SRCTAR" ]; then echo "::error ::ERROR: cannot build package tar ball"; exit 1; fi
       ls -l $SRCTAR
       echo SRCTAR=$SRCTAR >> $GITHUB_ENV
       echo SRCDIR=$SRCDIR >> $GITHUB_ENV
       echo BLDIR=$BLDIR >> $GITHUB_ENV
       echo '::endgroup::'
     shell: bash

   - name: Install Linux dependencies
     if: ${{ runner.os == 'Linux' && inputs.debian-deps != '' }}
     run: |
         # apt-get install
         echo "::group::Install Linux system dependencies"
         sudo apt-get install -y ${{ inputs.debian-deps }}
         echo '::endgroup::'
     shell: bash

   - name: Install macOS dependencies
     if: ${{ runner.os == 'macOS' && inputs.macos-deps != '' }}
     run: |
         # Installation from mac.R-project.org
         echo "::group::Install macOS system dependencies"
         ARCH=`uname -m`
         if [ ! -e /opt/R/$ARCH ]; then sudo mkdir -p /opt/R/$ARCH; sudo chown -R $USER /opt/R; fi
         Rscript -e 'dep="${{ inputs.macos-deps }}"; dep=unlist(strsplit(dep, "[, ]+")); source("https://mac.R-project.org/bin/install.R"); install.libs(dep)'
         if ! echo $PATH | grep /opt/R/$ARCH/bin >/dev/null; then echo /opt/R/$ARCH/bin > newPATH; cat $GITHUB_PATH >> newPATH; cat newPATH > $GITHUB_PATH; fi
         echo ''
         echo '::endgroup::'
     shell: bash

   - name: Install Windows dependencies
     if: ${{ runner.os == 'Windows' && inputs.windows-deps != '' }}
     run: |
       # pacman
       echo "::group::Install Windows system dependencies"
       if which pacman 2>/dev/null; then
         pacman -Sy
         for i in ${{ inputs.windows-deps }}; do
           pacman --sync --noconfirm mingw-w64-i686-$i mingw-w64-x86_64-$i
         done
       else
         echo "NOTE: pacman not found, assuming UCRT toolchain which already contains dependencies"
         echo "      see https://github.com/kalibera/ucrt3 for corresponding action"
       fi
       echo ''
       echo '::endgroup::'
     shell: bash

   - name: Install package and dependencies
     run: |
       # Package installation
       echo "::group::Install $PACKAGE and dependencies"
       mkdir -p $BLDIR/repo/src/contrib
       mkdir $BLDIR/Rlib
       SAFEDIR=$BLDIR
       cp $SRCTAR $BLDIR/repo/src/contrib
       REPOURL="file://$BLDIR/repo"
       if [ "${{ runner.os }}" = Linux -o "${{ inputs.dep-type }}" = source ]; then
         PKGTYPE=source
       else ## create a fake, empty binary repo
         BRPATH=$BLDIR/repo`Rscript -e 'cat(contrib.url('\'\'',.Platform$pkgType))'`
         echo Binary install - target repo is $BRPATH
         mkdir -p $BRPATH
         echo '' > $BRPATH/PACKAGES
         ls -l $BRPATH
         PKGTYPE=both
       fi
       if [ "${{ runner.os }}" = Windows ]; then
         SAFEDIR=$(cd $BLDIR && Rscript -e 'cat(getwd())')
         REPOURL="file:$SAFEDIR/repo"
       fi
       R_LIBS=$BLDIR/Rlib Rscript -e "\
         tools::write_PACKAGES('$SAFEDIR/repo/src/contrib',type='source'); \
         if (isTRUE('@CRAN@' %in% getOption('repos'))) chooseCRANmirror(graphics=FALSE, ind=1, local.only=TRUE); \
         install.packages('$PACKAGE',,c('$REPOURL',getOption('repos')), type='$PKGTYPE', dependencies=TRUE) \
       "
       echo '::endgroup::'
     shell: bash

   - name: R CMD check
     run: |
       # Checking 
       echo "::group::R CMD check"
       if ! pdflatex --version | head -n1; then echo "::warning ::pdflatex not found, using --no-manual"; XTRA=--no-manual; fi
       ## avoid network issues
       export _R_CHECK_CRAN_INCOMING_REMOTE_=false
       echo ''
       echo R_LIBS=$BLDIR/Rlib R CMD check ${{ inputs.check-flags }} $XTRA $SRCTAR
       cd $BLDIR
       R_LIBS=$BLDIR/Rlib R CMD check ${{ inputs.check-flags }} $XTRA $SRCTAR
       echo '::endgroup::'
       if [ -e "${PACKAGE}.Rcheck/00install.out" ]; then
         echo '::group::00install.out'
         cat "${PACKAGE}.Rcheck/00install.out"
         echo '::endgroup::'
       fi
       if [ -d "${PACKAGE}.Rcheck/tests" ]; then
         for tf in `ls "${PACKAGE}.Rcheck/tests/"*.Rout 2>/dev/null`; do
           echo "::group::$tf"
           cat "$tf"
           echo '::endgroup::'
         done
       fi
     shell: bash
